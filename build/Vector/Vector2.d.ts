import { IPolar } from "../polar";
import IVector2, { IVector2Data, IVector2Json } from "./interfaces/IVector2";
import IMatrix3 from "../matrix/interfaces/IMatrix3";
export default class Vector2 extends Float32Array implements IVector2 {
    readonly isVector2 = true;
    readonly length = 2;
    constructor(x?: number, y?: number);
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
}
export declare const add: (a: IVector2Data, b: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const addScalar: (a: IVector2Data, b: number, out?: IVector2Data) => IVector2Data;
export declare const angle: (a: IVector2Data) => number;
export declare const ceil: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const clamp: (a: IVector2Data, min: IVector2Data, max: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const clampSafe: (a: IVector2Data, min: IVector2, max: IVector2, out?: IVector2Data) => IVector2Data;
export declare const clampLength: (a: IVector2Data, min: IVector2, max: IVector2, out?: IVector2Data) => IVector2Data;
export declare const clampScalar: (a: IVector2Data, min: number, max: number, out?: IVector2Data) => IVector2Data;
export declare const closeTo: (a: IVector2Data, b: IVector2Data, epsilon?: number) => boolean;
export declare const closeToRect: (a: IVector2Data, b: IVector2Data, epsilon?: number) => boolean;
export declare const closeToManhattan: (a: IVector2Data, b: IVector2Data, epsilon?: number) => boolean;
export declare const clone: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const cross: (a: IVector2Data, b: IVector2Data) => number;
export declare const distanceTo: (a: IVector2Data, b: IVector2Data) => number;
export declare const distanceToManhattan: (a: IVector2Data, b: IVector2Data) => number;
export declare const distanceToSquared: (a: IVector2Data, b: IVector2Data) => number;
export declare const divide: (a: IVector2Data, b: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const divideScalar: (a: IVector2Data, scalar: number, out?: IVector2Data) => IVector2Data;
export declare const dot: (a: IVector2Data, b: IVector2Data) => number;
export declare const equals: (a: IVector2Data, b: IVector2Data) => boolean;
export declare const floor: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const floorToZero: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const from: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const fromArray: (arr: number[], index?: number, out?: IVector2Data) => IVector2Data;
export declare const fromPolar: (p: IPolar, out?: IVector2Data) => IVector2Data;
export declare const fromScalar: (value?: number, out?: IVector2Data) => IVector2Data;
export declare const inverse: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const length: (a: IVector2Data) => number;
export declare const lengthManhattan: (a: IVector2Data) => number;
export declare const lengthSquared: (a: IVector2Data) => number;
export declare const lerp: (a: IVector2Data, b: IVector2Data, alpha: number, out?: IVector2Data) => IVector2Data;
export declare const max: (a: IVector2Data, b: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const min: (a: IVector2Data, b: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const minus: (a: IVector2Data, b: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const minusScalar: (a: IVector2Data, num: number, out?: IVector2Data) => IVector2Data;
export declare const multiplyScalar: (a: IVector2Data, scalar: number, out?: IVector2Data) => IVector2Data;
export declare const negate: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const normalize: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const random: (length?: number, out?: IVector2Data) => IVector2Data;
export declare const rotate: (a: IVector2Data, angle: number, center?: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const round: (a: IVector2Data, out?: IVector2Data) => IVector2Data;
export declare const set: (x?: number, y?: number, out?: IVector2Data) => IVector2Data;
export declare const setLength: (a: IVector2Data, length: number, out?: IVector2Data) => IVector2Data;
export declare const toArray: (a: IVector2Data, arr?: number[]) => number[];
export declare const toJson: (a: IVector2Data, json?: IVector2Json) => IVector2Json;
export declare const toPalorJson: (a: IVector2Data, p?: {
    a: number;
    r: number;
}) => IPolar;
export declare const toString: (a: IVector2Data) => string;
export declare const transformMatrix3: (a: IVector2Data, m: IMatrix3, out: IVector2Data) => IVector2Data;
export declare const VECTOR2_ZERO: Vector2;
export declare const VECTOR2_TOP: Vector2;
export declare const VECTOR2_BOTTOM: Vector2;
export declare const VECTOR2_LEFT: Vector2;
export declare const VECTOR2_RIGHT: Vector2;
