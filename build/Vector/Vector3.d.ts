import { Matrix4 } from "../matrix/Matrix4";
export interface IVector3Json {
    x: number;
    y: number;
    z: number;
}
export interface IVector3 extends Float32Array, IVector3Json {
}
export type Vector3Like = IVector3 | Vector3 | number[] | Float32Array;
export declare class Vector3 extends Float32Array implements IVector3 {
    static readonly VECTOR3_ZERO: Vector3;
    static readonly VECTOR3_ONE: Vector3;
    static readonly VECTOR3_TOP: Vector3;
    static readonly VECTOR3_BOTTOM: Vector3;
    static readonly VECTOR3_LEFT: Vector3;
    static readonly VECTOR3_RIGHT: Vector3;
    static readonly VECTOR3_FRONT: Vector3;
    static readonly VECTOR3_BACK: Vector3;
    static add: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static addScalar: (a: Vector3Like, b: number, out?: Vector3) => Vector3;
    static angle: (a: Vector3Like, b: Vector3Like) => number;
    static clamp: (a: Vector3Like, min: Vector3Like, max: Vector3Like, out?: Vector3) => Vector3;
    static clampSafe: (a: Vector3Like, min: Vector3Like, max: Vector3Like, out?: Vector3) => Vector3;
    static clampScalar: (a: Vector3Like, min: number, max: number, out?: Vector3) => Vector3;
    static clone: (a: Vector3Like, out?: Vector3) => Vector3;
    static closeTo: (a: Vector3Like, b: Vector3Like) => boolean;
    static create: (x?: number, y?: number, z?: number, out?: Vector3) => Vector3;
    static cross: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static distanceTo: (a: Vector3Like, b: Vector3Like) => number;
    static distanceToManhattan: (a: Vector3Like, b: Vector3Like) => number;
    static distanceToSquared: (a: Vector3Like, b: Vector3Like) => number;
    static divide: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static divideScalar: (a: Vector3Like, b: number, out?: Vector3) => Vector3;
    static dot: (a: Vector3Like, b: Vector3Like) => number;
    static equals: (a: Vector3Like, b: Vector3Like) => boolean;
    static fromArray: (a: ArrayLike<number> | Vector3Like, offset?: number, out?: Vector3) => Vector3;
    static fromScalar: (num: number, out?: Vector3) => Vector3;
    static fromValues: (x: number, y: number, z: number, out?: Vector3) => Vector3;
    static fromMatrix4Translate: (mat: Matrix4, out?: Vector3) => Vector3;
    static hermite: (a: Vector3Like, b: Vector3Like, c: Vector3Like, d: Vector3Like, t: number, out?: Vector3) => Vector3;
    static inverse: (a: Vector3Like, out?: Vector3) => Vector3;
    static norm: (a: Vector3Like) => number;
    static lengthManhattan: (a: Vector3Like) => number;
    static lengthSquared: (a: Vector3Like) => number;
    static lerp: (a: Vector3Like, b: Vector3Like, alpha: number, out?: Vector3) => Vector3;
    static max: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static min: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static minus: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static minusScalar: (a: Vector3Like, b: number, out?: Vector3) => Vector3;
    static multiply: (a: Vector3Like, b: Vector3Like, out?: Vector3) => Vector3;
    static multiplyScalar: (a: Vector3Like, scalar: number, out?: Vector3) => Vector3;
    static negate: (a: Vector3Like, out?: Vector3) => Vector3;
    static normalize: (a: Vector3Like, out?: Vector3) => Vector3;
    static rotateX: (a: Vector3Like, b: Vector3Like, rad: number, out?: Vector3) => Vector3;
    static rotateY: (a: Vector3Like, b: Vector3Like, rad: number, out?: Vector3) => Vector3;
    static rotateZ: (a: Vector3Like, b: Vector3Like, rad: number, out?: Vector3) => Vector3;
    static round: (a: Vector3Like, out?: Vector3) => Vector3;
    static set: (x?: number, y?: number, z?: number, out?: Vector3) => Vector3;
    static setNorm: (a: Vector3Like, len: number, out?: Vector3) => Vector3;
    static slerp: (a: Vector3Like, b: Vector3Like, t: number, out?: Vector3) => Vector3;
    static toString: (a: Vector3Like) => string;
    static transformMatrix3: (a: Vector3Like, m: Vector3Like, out?: Vector3) => Vector3;
    static transformMatrix4: (a: Vector3Like, m: Matrix4, out?: Vector3) => Vector3;
    static transformQuat: (a: Vector3Like, q: Vector3Like, out?: Vector3) => Vector3;
    readonly length: 3;
    readonly dataType: string;
    constructor(x?: number, y?: number, z?: number);
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
}
