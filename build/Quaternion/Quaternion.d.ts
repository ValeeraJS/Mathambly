import IQuaternion, { IQuaternionData } from "./interfaces/IQuaternion";
import IVector3 from "../vector/interfaces/IVector3";
import { IMatrix3 } from "../matrix";
export default class Quaternion extends Float32Array implements IQuaternion {
    readonly isQuaternion = true;
    readonly length: 4;
    constructor(x?: number, y?: number, z?: number, w?: number);
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get w(): number;
    set w(val: number);
}
export declare const angleTo: (a: IQuaternionData, b: IQuaternionData) => number;
export declare const conjugate: (a: IQuaternionData, out: IQuaternionData) => IQuaternionData;
export declare const create: (x?: number, y?: number, z?: number, w?: number) => Quaternion;
export declare const dot: (a: import("../vector/interfaces/IVector4").IVector4Data, b: import("../vector/interfaces/IVector4").IVector4Data) => number;
export declare const fromAxisAngle: (axis: IVector3, rad: number, out: IQuaternionData) => IQuaternionData;
export declare function fromMatrix3(m: IMatrix3, out: IQuaternionData): IQuaternionData;
export declare const identity: (out?: IQuaternionData) => IQuaternionData;
export declare const invert: (a: IQuaternionData, out: IQuaternionData) => IQuaternionData;
export declare const lerp: (a: import("../vector/interfaces/IVector4").IVector4Data, b: import("../vector/interfaces/IVector4").IVector4Data, t: number, out?: import("../vector/interfaces/IVector4").IVector4Data) => import("../vector/interfaces/IVector4").IVector4Data;
export declare const multiply: (a: IQuaternionData, b: IQuaternionData, out: IQuaternionData) => IQuaternionData;
export declare const random: (out: IQuaternionData) => IQuaternionData;
export declare const rotationTo: (a: IVector3, b: IVector3, out: IQuaternionData) => IQuaternionData;
export declare const rotateX: (a: IQuaternionData, rad: number, out: IQuaternionData) => IQuaternionData;
export declare const rotateY: (a: IQuaternionData, rad: number, out: IQuaternionData) => IQuaternionData;
export declare const rotateZ: (a: IQuaternionData, rad: number, out: IQuaternionData) => IQuaternionData;
export declare const slerp: (a: IQuaternionData, b: IQuaternionData, t: number, out: IQuaternionData) => IQuaternionData;
export declare const toAxisAngle: (q: IQuaternionData, outAxis?: IVector3) => number;
export declare const toString: (a: IQuaternionData) => string;
